

f={};
try
    cd('/media/Projects/Alex/Satiation Analysis');      %/Volumes/MTL/CS4 output')   %orginal form michael '/Volumes/Barnacle/Data/Satiation_data/Satiation_session_data'
catch
    cd('/media/Projects/Alex/');      %/Volumes/MTL/CS4 output')
end


h=1;
DirName= dir;
for a = 1:length(DirName)
    if regexp(DirName(a).name, 'Sat_+[0-9][0-9][0-9]')
        f{end+1,1} = [DirName(a).name];
        
        
        %
        % if nargin ==0
        %     [satcue, ranking, events] = load_behavioural_data;
        % elseif nargin>0
        [satcue, ranking, events] = load_behavioural_data(DirName(a).name);
        % end
        
        
        [RT] = extract_reaction_times(events);
        
        
        
        for jj=[3,6]
            val_rat=nan(length(satcue{jj-1}(:,14)),1);             % value of image on A given in previous rating trials (-300 to 300)
            val_2AFC=nan(length(satcue{jj-1}(:,14)),1);            % value of image on A given in previous whole 2AFC trials (0 to 1900)
            val_ranking=nan(length(satcue{jj-1}(:,14)),1);         % rank of image on A, calculated after all the choice trials (0 to 20)
            val_total=nan(length(satcue{jj-1}(:,14)),1);         % rank of image on A, calculated after all the choice trials (0 to 20)
            
            
            
            for i=1:20
                
                ind=find(cell2mat(satcue{jj-1}(:,2))==i);            % when this stimulus was on left
                
                
                valRat= ranking{jj-1}(i,4);                        % rating value (-300 to 300)
                valRank= ranking{jj}(i,3);                         % ranking (0 to 20)
                val2AFC= ranking{jj}(i,4);                         % choice rating (0-1900)
                valTot= ranking{jj}(i,5);                         % choice rating (-1900-1900)
                
                
                val_rat(ind)= valRat;
                val_L_ranking(ind)= valRank;
                val_L_2AFC(ind)= val2AFC;
                val_L_total(ind)= valTot;
                
                
            end
            
            
            % Correlation between value given and value input difference?
            
            
            val_expected=val_rat;
            %% partial_error analysis
            
            % this is a very weak anlysis. As patients have very few
            % error, compardd to monkeys, and Diff-Drift predicts reduction
            % of error with higher difference in value
            % for this I use this analysis, which maps the response (in 9 levels)
            % to the difference in value (9 levels from 0 to 600)
            
            
            % Expected value
            
            expected_val=[];
            
            step=600/9; shift=600/2;
            
            for i=1:length(val_expected)
                if  val_expected(i)< step*1 -shift
                    expected_val(i)=1;
                elseif val_expected(i)< step*2 -shift
                    expected_val(i)=2;
                elseif val_expected(i)< step*3 -shift
                    expected_val(i)=3;
                elseif val_expected(i)< step*4 -shift
                    expected_val(i)=4;
                elseif val_expected(i)< step*5 -shift
                    expected_val(i)=5;
                elseif val_expected(i)< step*6 -shift
                    expected_val(i)=6;
                elseif val_expected(i)< step*7 -shift
                    expected_val(i)=7;
                elseif val_expected(i)< step*8 -shift
                    expected_val(i)=8;
                elseif val_expected(i)<= step*9 -shift
                    expected_val(i)=9;
                else
                    expected_val(i)=0;
                end
            end
            
            if any(expected_val==0);
                error('some expected values were not classified');
            end
            
            % Real value
            
            real_val=[];
            resp_val=cell2mat(satcue{jj-1}(:,14));
            for i=1:length(resp_val)
                if     resp_val(i)== -100
                    real_val(i)=1;
                elseif resp_val(i)== -75
                    real_val(i)=2;
                elseif resp_val(i)== -50
                    real_val(i)=3;
                elseif resp_val(i)== -25
                    real_val(i)=4;
                elseif resp_val(i)== 0
                    real_val(i)=5;
                elseif resp_val(i)== 25
                    real_val(i)=6;
                elseif resp_val(i)== 50
                    real_val(i)=7;
                elseif resp_val(i)== 75
                    real_val(i)=8;
                elseif resp_val(i)== 100
                    real_val(i)=9;
                    
                end
            end
            
            if any(resp_val==0);
                error('some answer values were not classified')
            end
            
            
            partial_error= expected_val - real_val;
            partial_error_abs= abs(partial_error);       %
            partial_error_freq = partial_error_abs >= 1; %
            partial_error_freqcorr = partial_error_abs >= 2; %
            partial_corrCoef= partial_error_abs; partial_corrCoef(partial_corrCoef==1)=0;     % not included as error if only one step of difference
            
            
            coeff_error=[];
            freq_corrError=[];
            non_corrFreq=[];
            error_total=cell('');
            pos_error=cell('');
            neg_error=cell('');
            corrCoef=[];
            
            for kk=1:9
                coeff_error(kk)= sum(partial_error_abs(expected_val==kk));
                freq_corrError(kk) = sum(partial_error_freqcorr(expected_val==kk));
                non_corrFreq(kk)= sum(partial_error_freq(expected_val==kk));
                corrCoef(kk)= sum(partial_corrCoef(expected_val==kk));
                error_total{kk}  = partial_error(expected_val==kk);
                neg_error{kk}= error_total{kk}(error_total{kk}<0);
                pos_error{kk}= error_total{kk}(error_total{kk}>0);
                
            end
            
            
            for i=1:9
                
                final_coeff(i)= coeff_error(i)/ length(find(expected_val==i));
                fincorral_freq(i) = freq_corrError (i)  / length(find(expected_val==i));
                final_noncorr_freq(i) = non_corrFreq (i) / length(find(expected_val==i));
                fincorrCoef(i)  = corrCoef  (i) / length(find(expected_val==i));
            end
            
            
            out_coeff{h,jj/3}=final_coeff;
            out_corrfreq{h,jj/3}= fincorral_freq;
            out_noncorr_freq{h,jj/3}=final_noncorr_freq;
            out_corrCoeff{h,jj/3}= fincorrCoef;
            
        end
        h=h+1;
    end
    
end

for jj=[1:7,9:11]
    A1(jj,1:9)=out_coeff{jj,1}; B1(jj,1:9)=out_corrfreq{jj,1}; C1(jj,1:9)=out_noncorr_freq{jj,1}; D1(jj,1:9)=out_corrCoeff{jj,1};
    A2(jj,1:9)=out_coeff{jj,2}; B2(jj,1:9)=out_corrfreq{jj,2}; C2(jj,1:9)=out_noncorr_freq{jj,2}; D2(jj,1:9)=out_corrCoeff{jj,2};
end

% beforeA=nansum(A1,1)/10; beforeB=nansum(B1,1)/10; beforeC=nansum(C1,1)/10; beforeD=nansum(D1,1)/10;
% afterA=nansum(A2,1)/10; afterB=nansum(B2,1)/10; afterC=nansum(C2,1)/10; afterD=nansum(D2,1)/10;

beforeA=nanmean(A1,1); beforeB=nanmean(B1,1); beforeC=nanmean(C1,1); beforeD=nanmean(D1,1);
afterA=nanmean(A2,1); afterB=nanmean(B2,1); afterC=nanmean(C2,1); afterD=nanmean(D2,1);




figure;
bar([beforeA;afterA]);
title('Partial Error Coefficient'); ylabel('Mean Partial Error Coefficient')

figure;
bar([beforeC;afterC]);
title('Partial Error Frequency');ylabel('Mean Partial  Error Frequency' )

figure;
bar([beforeB;afterB]);
title('Partial Error Frequency Corrected');ylabel('Mean Partial Error Frequency' )

figure;
bar([beforeD;afterD]);
title('Partial Error Coefficient Corrected');ylabel('Mean Partial Error Coefficient' )

